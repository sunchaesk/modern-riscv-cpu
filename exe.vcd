$date
	Mon Jul  1 15:22:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module control_tb $end
$var wire 2 ! result_src [1:0] $end
$var wire 1 " reg_write $end
$var wire 1 # pc_write $end
$var wire 32 $ pc_out [31:0] $end
$var wire 1 % mem_write $end
$var wire 1 & ir_write $end
$var wire 1 ' instruction_or_data $end
$var wire 32 ( instr_out [31:0] $end
$var wire 4 ) current_state [3:0] $end
$var wire 2 * alu_src_b [1:0] $end
$var wire 2 + alu_src_a [1:0] $end
$var wire 32 , alu_out [31:0] $end
$var wire 3 - alu_control [2:0] $end
$var reg 1 . clk $end
$var reg 1 / reset $end
$var integer 32 0 i [31:0] $end
$scope module cu $end
$var wire 1 . clk $end
$var wire 4 1 current_state [3:0] $end
$var wire 3 2 funct3 [2:0] $end
$var wire 7 3 funct7 [6:0] $end
$var wire 7 4 opcode [6:0] $end
$var wire 1 / reset $end
$var reg 3 5 alu_control [2:0] $end
$var reg 2 6 alu_src_a [1:0] $end
$var reg 2 7 alu_src_b [1:0] $end
$var reg 4 8 curr_state [3:0] $end
$var reg 1 ' instruction_or_data $end
$var reg 1 & ir_write $end
$var reg 1 % mem_write $end
$var reg 4 9 next_state [3:0] $end
$var reg 1 # pc_write $end
$var reg 1 " reg_write $end
$var reg 2 : result_src [1:0] $end
$upscope $end
$scope module dp $end
$var wire 3 ; alu_control [2:0] $end
$var wire 2 < alu_src_a [1:0] $end
$var wire 2 = alu_src_b [1:0] $end
$var wire 1 . clk $end
$var wire 32 > d_alu_result [31:0] $end
$var wire 32 ? d_pc_out [31:0] $end
$var wire 32 @ data [31:0] $end
$var wire 32 A instr_out [31:0] $end
$var wire 1 ' instruction_or_data $end
$var wire 1 & ir_write $end
$var wire 1 % mem_write $end
$var wire 32 B next_pc [31:0] $end
$var wire 1 # pc_write $end
$var wire 1 " reg_write $end
$var wire 1 / reset $end
$var wire 2 C result_src [1:0] $end
$var wire 32 D rs1_data [31:0] $end
$var wire 32 E rs2_data [31:0] $end
$var wire 5 F rs2 [4:0] $end
$var wire 5 G rs1 [4:0] $end
$var wire 32 H immediate [31:0] $end
$var reg 32 I adr [31:0] $end
$var reg 32 J alu_a [31:0] $end
$var reg 32 K alu_b [31:0] $end
$var reg 32 L alu_out [31:0] $end
$var reg 32 M alu_result [31:0] $end
$var reg 32 N ir [31:0] $end
$var reg 32 O pc [31:0] $end
$var reg 32 P read_data [31:0] $end
$var reg 32 Q result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 Q
bx P
b0 O
b0 N
b100 M
bx L
b100 K
b0 J
b0 I
b0 H
b0 G
b0 F
bx E
bx D
b10 C
b100 B
b0 A
bx @
b0 ?
bx >
b1 =
b0 <
b0 ;
b10 :
b1 9
b0 8
b1 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
bx 0
1/
0.
b0 -
bx ,
b0 +
b1 *
b0 )
b0 (
0'
1&
0%
b0 $
1#
0"
b10 !
$end
#5000
b0 ,
b0 >
b0 L
1.
#10000
0.
0/
#15000
bx K
b0 *
b0 7
b0 =
b0 !
b0 :
b0 C
0#
0&
b10 9
b11111111111111111111100000000000 H
b1000000 3
b10 2
b11 4
b100 I
b100 Q
bx B
bx M
b100 J
b1 )
b1 1
b1 8
b10000000000000000010000000000011 @
b10000000000000000010000000000011 P
b10000000000000000010000000000011 (
b10000000000000000010000000000011 A
b10000000000000000010000000000011 N
b100 $
b100 ?
b100 O
b100 ,
b100 >
b100 L
1.
#20000
0.
#25000
b11111111111111111111100000000000 K
bx J
b10 *
b10 7
b10 =
b1 +
b1 6
b1 <
b11 9
bx Q
b11000000000000000010000000000011 @
b11000000000000000010000000000011 P
b10 )
b10 1
b10 8
bx ,
bx >
bx L
1.
#30000
0.
#35000
bx I
bx K
1'
b0 *
b0 7
b0 =
b100 9
b11 )
b11 1
b11 8
1.
#40000
0.
#45000
b100 I
1"
b1 !
b1 :
b1 C
0'
b0 9
bx @
bx P
b100 )
b100 1
b100 8
1.
#50000
0.
#55000
b1000 B
b1000 M
b100 K
b100 J
b1 *
b1 7
b1 =
b0 +
b0 6
b0 <
1&
1#
b10 !
b10 :
b10 C
0"
b1 9
b1000 Q
b0 )
b0 1
b0 8
b11000000000000000010000000000011 @
b11000000000000000010000000000011 P
1.
#60000
0.
#65000
bx K
b11111111111111111111110000000000 H
b1100000 3
b0 *
b0 7
b0 =
b0 !
b0 :
b0 C
0#
0&
b10 9
b1000 I
b1000 Q
bx B
bx M
b1000 J
b11000000000000000010000000000011 (
b11000000000000000010000000000011 A
b11000000000000000010000000000011 N
b1000 $
b1000 ?
b1000 O
b1 )
b1 1
b1 8
b1000 ,
b1000 >
b1000 L
1.
#70000
0.
#75000
b11111111111111111111110000000000 K
bx J
b10 *
b10 7
b10 =
b1 +
b1 6
b1 <
b11 9
bx Q
b10 )
b10 1
b10 8
b11100000000000000010000000000011 @
b11100000000000000010000000000011 P
bx ,
bx >
bx L
1.
#80000
0.
#85000
bx I
bx K
1'
b0 *
b0 7
b0 =
b100 9
b11 )
b11 1
b11 8
1.
#90000
0.
#95000
b1000 I
1"
b1 !
b1 :
b1 C
0'
b0 9
b100 )
b100 1
b100 8
bx @
bx P
1.
#100000
0.
#105000
b1100 Q
b1100 B
b1100 M
b100 K
b1000 J
b1 *
b1 7
b1 =
b0 +
b0 6
b0 <
1&
1#
b10 !
b10 :
b10 C
0"
b1 9
b11100000000000000010000000000011 @
b11100000000000000010000000000011 P
b0 )
b0 1
b0 8
1.
#110000
0.
#115000
bx K
b0 *
b0 7
b0 =
b0 !
b0 :
b0 C
0#
0&
b10 9
b11111111111111111111111000000000 H
b1110000 3
b1100 I
b1100 Q
bx B
bx M
b1100 J
b1 )
b1 1
b1 8
b11100000000000000010000000000011 (
b11100000000000000010000000000011 A
b11100000000000000010000000000011 N
b1100 $
b1100 ?
b1100 O
b1100 ,
b1100 >
b1100 L
1.
#120000
0.
#125000
b11111111111111111111111000000000 K
bx J
b10 *
b10 7
b10 =
b1 +
b1 6
b1 <
b11 9
bx Q
bx @
bx P
b10 )
b10 1
b10 8
bx ,
bx >
bx L
1.
#130000
0.
#135000
bx I
bx K
1'
b0 *
b0 7
b0 =
b100 9
b11 )
b11 1
b11 8
1.
#140000
0.
#145000
b1100 I
1"
b1 !
b1 :
b1 C
0'
b0 9
b100 )
b100 1
b100 8
1.
#150000
0.
#155000
b10000 Q
b10000 B
b10000 M
b100 K
b1100 J
b1 *
b1 7
b1 =
b0 +
b0 6
b0 <
1&
1#
b10 !
b10 :
b10 C
0"
b1 9
b0 )
b0 1
b0 8
1.
#160000
0.
#165000
bx K
bx G
bx F
bx H
bx 3
bx 2
bx 4
b0 *
b0 7
b0 =
b0 !
b0 :
b0 C
0#
0&
b10 9
b10000 I
b10000 Q
bx B
bx M
b10000 J
bx (
bx A
bx N
b10000 $
b10000 ?
b10000 O
b1 )
b1 1
b1 8
b10000 ,
b10000 >
b10000 L
1.
#170000
0.
#175000
bx J
b10 *
b10 7
b10 =
b1 +
b1 6
b1 <
bx Q
b10 )
b10 1
b10 8
bx ,
bx >
bx L
1.
#180000
0.
#185000
1.
#190000
0.
#195000
1.
#200000
0.
#205000
1.
#210000
0.
#215000
1.
#220000
0.
#225000
1.
#230000
0.
#235000
1.
#240000
0.
#245000
1.
#250000
0.
#255000
1.
#260000
0.
#265000
1.
#270000
0.
b100000 0
